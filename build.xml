<?xml version="1.0" encoding="iso-8859-1" ?>

<project name="Scoja" basedir="." default="compile">

<property name="build.sysclasspath" value="ignore"/>

<property name="major" value="0"/>
<property name="middle" value="9"/>
<property name="minor" value="8"/>
<property name="version" value="${major}.${middle}.${minor}"/>
<property name="autogenerated-message" value="
WARNING: This file has been automatically generated from an .in file.
DON'T EDIT ME: modify the .in file instead."/>

<property name="src" value="src"/>
<property name="java" value="${src}/java"/>
<property name="extra-1.3" value="${src}/extra-1.3"/>
<property name="test" value="test/java"/>
<property name="test.common" value="test/common/java"/>
<property name="test.human" value="test/human/java"/>
<property name="test.junit" value="test/junit/java"/>
<property name="test.perf" value="test/perf/java"/>
<property name="lib" value="lib"/>

<property name="build" value="build"/>
<property name="include" value="${build}/include"/>
<property name="obj" value="build/obj"/>
<property name="classes" value="build/scoja"/>
<property name="classes-1.3" value="build/extra-1.3"/>
<property name="test.classes" value="build/test"/>
<property name="test.common.classes" value="build/test/common"/>
<property name="test.human.classes" value="build/test/human"/>
<property name="test.junit.classes" value="build/test/junit"/>

<property name="doc" value="doc"/>
<property name="manual" value="${doc}/manual"/>
<property name="javadoc" value="${doc}/javadoc"/>
<property name="javadoc.engine" value="${javadoc}/engine"/>
<property name="javadoc.test" value="${javadoc}/test"/>

<property name="junit.log" value="build/test/reports"/>

<property name="distrib" value="distrib"/>
<property name="distrib.bin" value="${distrib}/bin"/>

<property file="build.properties"/>
<property name="jython.home" value="/opt/jython"/>


<fileset id="java-in" dir=".">
    <patternset>
        <include name="${java}/**/*.java.in"/>
    </patternset>
</fileset>

<fileset id="java-out" dir=".">
    <present targetdir=".">
        <mapper type="glob" from="*.java" to="*.java.in"/>
    </present>
</fileset>


<path id="compile.class.path">
    <pathelement location="${classes}"/>
    <pathelement location="${test.common.classes}"/>
    <pathelement location="${test.human.classes}"/>
    <pathelement location="${test.junit.classes}"/>
    <fileset dir="${lib}">
       <include name="*.jar"/>
    </fileset>
</path>

<path id="extra-1.3.class.path">
    <pathelement location="${classes-1.3}"/>
</path>


<target name="clean" description="
Cleans all the stuff produced while compiling, building, doc, ...">
  <delete dir="${distrib}"/>
  <delete dir="${build}/include"/>
  <delete dir="${build}/obj"/>
  <delete dir="${build}/scoja"/>
  <delete dir="${build}/test"/>
  <delete>
      <fileset refid="java-out"/>
  </delete>
  <delete file="${lib}/jython.jar"/>
  <delete dir="${lib}/Lib"/>
  <delete>
    <fileset file="${lib}/scoja-*.jar"/>
  </delete>
</target>


<target name="clean-doc">
    <delete dir="${javadoc}"/>
    <delete>
      <fileset dir="${doc}" excludes="**/*.tex">
          <present targetdir="${doc}">
              <mapper type="regexp" to="\1.tex"
                      from="^(.*)\.(aux|dvi|log|toc)"/>
          </present>
      </fileset>
    </delete>
</target>


<target name="clean-ultra" depends="clean,clean-doc" description="
Like clean, but also clean data produced at execution, emacs backups (*~),...">
    <delete dir="${build}"/>
    <delete dir="${lib}/cachedir"/>
    <delete dir="tmp"/>
    <delete>
      <fileset dir="." includes="**/*~" defaultexcludes="no"/>
    </delete>
    <delete>
      <fileset dir="ideas" includes="**/*.class" defaultexcludes="no"/>
    </delete>
</target>


<target name="init" description="
Creates all the structure of folders needed to compile and doc">
  <tstamp>
      <format property="builddate" pattern="yyyy/MM/dd hh:mm:ss"/>
  </tstamp>
  <mkdir dir="${build}"/>
  <mkdir dir="${include}"/>
  <mkdir dir="${obj}"/>
  <mkdir dir="${classes}"/>
  <mkdir dir="${classes-1.3}"/>
  <mkdir dir="${test.classes}"/>
  <mkdir dir="${test.common.classes}"/>
  <mkdir dir="${test.human.classes}"/>
  <mkdir dir="${test.junit.classes}"/>
  <mkdir dir="${distrib}"/>
  <mkdir dir="${javadoc}"/>
  <mkdir dir="${javadoc.engine}"/>
  <mkdir dir="${javadoc.test}"/>
  <mkdir dir="${junit.log}"/>
  <available property="junit.present" 
    classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
  />

  <condition property="IsWindows" value="true">
    <os family="windows" />
  </condition>
  <condition property="IsUnix" value="true">
    <os family="unix" />
  </condition>

  <mkdir dir="${lib}/cachedir"/>    
  <copy todir="${lib}">
    <fileset dir="${jython.home}">
      <include name="jython.jar"/>
      <include name="Lib/encodings/**"/>
      <include name="Lib/codecs.py"/>
      <!--include name="Lib/codecs$py.class"/-->
      <include name="Lib/types.py"/>
      <!--include name="Lib/types\$py.class"/-->
    </fileset>
    <fileset dir="../common/distrib">
      <include name="scoja-cc*.jar"/>
    </fileset>
    <fileset dir="../compression/distrib">
      <include name="scoja-compression*.jar"/>
    </fileset>
    <fileset dir="../beep/distrib">
      <include name="scoja-beep*.jar"/>
    </fileset>
    <fileset dir="../rpc/distrib">
      <include name="scoja-rpc*.jar"/>
    </fileset>
  </copy>
</target>

<target name="expand" depends="init" description="
Expand .java.in with building and debugging information">
    <condition property="log-detail" value="INFO">
        <isfalse value="${debugging}"/>
    </condition>
    <condition property="log-detail" value="DEBUG">
        <istrue value="${debugging}"/>        
    </condition>

    <condition property="working-mode" value="Production version">
        <isfalse value="${debugging}"/>
    </condition>
    <condition property="working-mode" value="Debugging version">
        <istrue value="${debugging}"/>        
    </condition>

    <filterset id="java-filter" begintoken="@@" endtoken="@@">
        <filter token="AUTO" value="${autogenerated-message}"/>
        <filter token="MAJORVERSION" value="${major}"/>
        <filter token="MIDDLEVERSION" value="${middle}"/>
        <filter token="MINORVERSION" value="${minor}"/>
        <filter token="BUILDDATE" value="${builddate}"/>
        <filter token="WORKING_MODE" value="${working-mode}"/>
        <filter token="LOG_DETAIL" value="${log-detail}"/>
    </filterset>

    <copy todir=".">
        <fileset refid="java-in"/>
        <filterset refid="java-filter"/>
        <mapper type="glob" from="*.java.in" to="*.java"/>
    </copy>
</target>


<target name="compile" depends="expand" description="
Compile source files and test files and place binaries in build directory">
    <!--
    <taskdef name="jycompile" classname="org.python.util.JycompileAntTask">
      <classpath refid="compile.class.path" />
      <classpath path="${lib}/jython.jar"/>
    </taskdef>
    <jycompile srcdir="${java}" destdir="${classes}"/>
    -->
    
    <javac destdir="${classes}"  
           classpathref="compile.class.path" 
           debug="yes" optimize="yes" deprecation="yes">
        <!--compilerarg value="-Xlint:unchecked"/-->
        <src path="${java}" />
    </javac>
    
    <copy file="src/java/org/scoja/server/conf/scoja_conf.py"
          todir="${classes}/org/scoja/server/conf/" />
    <copy file="src/java/org/scoja/popu/recoja/recoja_conf.py"
          todir="${classes}/org/scoja/popu/recoja/" />
    
    <javac destdir="${test.common.classes}"  
           classpathref="compile.class.path" 
           debug="yes" deprecation="yes">
        <src path="${test.common}" />
    </javac>
    <javac destdir="${test.human.classes}"  
           classpathref="compile.class.path" 
           debug="yes" deprecation="yes">
        <compilerarg value="-Xlint:unchecked"/>
        <src path="${test.human}" />
    </javac>
    <javac destdir="${test.junit.classes}"  
           classpathref="compile.class.path" 
           debug="yes" deprecation="yes">
        <src path="${test.junit}" />
    </javac>

    <javah outputfile="${include}${file.separator}PosixNative.h"
           classpathref="compile.class.path">
        <class name="org.scoja.io.posix.PosixNative"/>
    </javah>

    <antcall target="make-unix-natives"/>
    <antcall target="make-windows-natives"/>
</target>

<target name="make-unix-natives" if="IsUnix">
    <exec executable="make">
        <arg line="native_c"/>
    </exec>
</target>

<target name="make-windows-natives" if="IsWindows">
    <echo>God fuck windows</echo>
</target>


<!-- ============================================================ -->
<!-- DOCUMENTATION -->

<target name="doc-tex" depends="init" description="
Typeset documentation">
    <exec dir="${manual}/user" executable="latex">
        <arg line="--interaction nonstopmode user.tex"/>
    </exec>
</target>


<target name="doc-java" depends="init" description="
Creates javadoc">
    <javadoc
     packagenames="org.scoja.*"
     sourcepath="${java}" 
     destdir="${javadoc.engine}"
     classpathref="compile.class.path"
     use="true"
     author="true"
     private="true"
     windowtitle="Scoja"
     header="&lt;b&gt;Scoja&lt;/b&gt;: Syslog COncurrent COllector in Java" 
     footer="&lt;b&gt;Scoja&lt;/b&gt;: Syslog COncurrent COllector in Java">
     <tag name="implementation" description="Implementation details: " />
     <tag name="todo" description="Remains to do: " />
     <tag name="bugs" description="Known bugs: " />
     <link href="http://java.sun.com/j2se/1.4/docs/api/"
           offline="true"
           packagelistLoc="doc/jdk" />
    </javadoc>

    <javadoc
     packagenames="org.scoja.*"
     destdir="${javadoc.test}"
     classpathref="compile.class.path"
     use="true"
     author="true"
     private="true"
     windowtitle="Scoja test"
     header="&lt;b&gt;Scoja&lt;/b&gt; Tests" 
     footer="&lt;b&gt;Scoja&lt;/b&gt; Tests">
     <sourcepath>
       <pathelement path="${test.human}"/>
       <pathelement path="${test.junit}"/>
       <!-- pathelement path="${test.perf}"/ -->
     </sourcepath>
     <tag name="implementation" description="Implementation details: " />
     <tag name="todo" description="Remains to do: " />
     <tag name="bugs" description="Known bugs: " />
     <link href="../engine"
           offline="false"
           packagelistLoc="${javadoc.engine}" />
     <link href="http://java.sun.com/j2se/1.4/docs/api/"
           offline="true"
           packagelistLoc="doc/jdk" />
    </javadoc>
</target>


<!-- ============================================================ -->
<!-- TEST -->

<target name="tests" depends="compile" description="
Run all the te jUnit tests and place reports in junit.log">
    <taskdef name="junit" 
     classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <junit printsummary="yes" haltonfailure="no">
        <!-- Scoja development directory -->
        <jvmarg value="-Dscoja.home=."/>
        <!-- For stress test with configurable duration: how long to run-->
        <jvmarg value="-Dscoja.stress.duration=10"/>
        <classpath refid="compile.class.path"/>
        <formatter type="plain"/>
        <batchtest fork="yes" todir="${junit.log}">
            <fileset dir="${test.junit}" includes="**/*Test*.java"/> 
        </batchtest>
    </junit>
</target>

<target name="testset" depends="compile" if="totest" description="
Run tests in property 'totest'">
    <taskdef name="junit" 
     classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"/>
    <junit printsummary="yes" haltonfailure="no">
        <!-- Scoja development directory -->
        <jvmarg value="-Dscoja.home=."/>
        <!-- For stress test with configurable duration: 
             how long to run in seconds with decimal places-->
        <jvmarg value="-Dscoja.stress.duration=4"/>
        <!-- Scoja standart properties -->
        <jvmarg value="-Dorg.scoja.server.name=SCOJATEST"/>
        <jvmarg value="-Djava.library.path=build/obj"/>
        <jvmarg value="-Dorg.scoja.io.posix.provider=org.scoja.io.posix.PosixNative"/>
        <classpath refid="compile.class.path"/>
        <formatter type="plain" usefile="false"/>
        <batchtest fork="yes" todir="${junit.log}">
            <fileset dir="${test.junit}" includes="${totest}"/>
        </batchtest>
    </junit>
</target>


<!-- ============================================================ -->
<!-- DISTRIBUTIONS -->

<target name="distrib-bin" depends="compile" description="
Builds a binary distribution at the current host.">
    <mkdir dir="${distrib.bin}"/>
    <mkdir dir="${distrib.bin}/cachedir"/>
    <jar jarfile="${distrib.bin}/scoja.jar">
        <fileset dir="${classes}">
            <include name="**/*.class"/>
            <include name="**/*.py"/>
        </fileset>
    </jar>
    <jar jarfile="${distrib.bin}/scoja-test.jar">
        <fileset dir="${test.human.classes}">
            <include name="**/*.class"/>
        </fileset>
    </jar>
    <jar jarfile="${distrib.bin}/scoja-client.jar">
        <fileset dir="${classes}">
            <include name="org/scoja/client/**/*.class"/>
            <include name="org/scoja/common/**/*.class"/>
            <include name="org/scoja/io/**/*.class"/>
            <include name="org/scoja/util/**/*.class"/>
            <include name="org/scoja/protocol/**/*.class"/>
            <include name="org/scoja/trans/**/*.class"/>
        </fileset>
    </jar>
    <copy todir="${distrib.bin}">
        <fileset dir="${lib}">
          <include name="**/*.jar"/>
          <exclude name="junit.jar"/>
        </fileset>
    </copy>
    <copy todir="${distrib.bin}" file="${src}/sh/scoja"/>
    <copy todir="${distrib.bin}" file="${src}/sh/scoja.sh"/>
    <copy todir="${distrib.bin}" file="${src}/sh/scoja.policy"/>
    <copy todir="${distrib.bin}/Lib">
        <fileset dir="${lib}/Lib"/>
    </copy>
    <copy todir="${distrib.bin}" file="${src}/sh/coja.sh"/>
    <copy todir="${distrib.bin}" file="${src}/sh/recoja.sh"/>
    <copy todir="${distrib.bin}" file="${src}/sh/cprezoso.sh"/>
    <chmod perm="+x" file="${distrib.bin}/*.sh"/>
    <copy todir="${distrib.bin}" file="${src}/sh/recoja.logconf"/>
    <mkdir dir="${distrib.bin}/recoja"/>
    <copy todir="${distrib.bin}/recoja" 
          file="test/human/recoja/suggested-nocomp.rcj"/>
    <copy todir="${distrib.bin}">
        <fileset dir="${obj}" includes="*.so"/>
    </copy>
    <tar destfile="${distrib}/scoja-bin-${version}.tgz" compression="gzip">
        <tarfileset dir="${distrib.bin}"
                    prefix="scoja-bin-${version}">
            <exclude name="**/cachedir/"/>
        </tarfileset>
    </tar>
</target>


<target name="distrib-code" depends="init" description="
Like distrib, but also pack source code and doc">
    <tar destfile="${distrib}/scoja-src-${version}.tgz" compression="gzip">
        <tarfileset dir="." prefix="scoja-src-${version}">
            <include name="build.xml"/>
            <include name="Makefile"/>
            <include name="doc/"/>
            <exclude name="doc/jdk/"/>
            <include name="lib/**/*.jar"/>
            <include name="src/"/>
            <include name="test/"/>
        </tarfileset>
    </tar>
</target>


<target name="distrib-light" depends="init" description="
Makes a source code only distribution, without 3th party libraries">
    <tar destfile="${distrib}/scoja-light-${version}.tgz" compression="gzip">
        <tarfileset dir="." prefix="scoja-${version}">
            <include name="build.xml"/>
            <include name="Makefile"/>
            <include name="src/"/>
            <include name="test/"/>
        </tarfileset>
    </tar>
</target>
    
<target name="distrib-native" depends="compile" description="
Makes a distribution with the native part; needed to install on a new architecture.">
    <tar destfile="${distrib}/scoja-native-${version}.tgz" compression="gzip">
        <tarfileset dir="." prefix="scoja-${version}">
            <include name="build.xml"/>
            <include name="Makefile"/>
            <include name="src/c/*.c"/>
            <include name="build/include/PosixNative.h"/>
        </tarfileset>
    </tar>
</target>
    
</project>
